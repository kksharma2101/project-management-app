generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  phone         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  bio           String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]    @relation("AssignedTasks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id           String   @id @default(cuid())
  title        String
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deadline     DateTime
  tags         String[] @default([])
  status       Status   @default(PENDING)
  priority     Priority
  user         String?
  assignedToId String?
  assignedTo   User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
