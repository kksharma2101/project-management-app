// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tasks         Task[]
    assignedTasks Task[]     @relation("TaskAssignments")
    teams         TeamMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Team {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  members     TeamMember[]
  projects    Project[]
}

model TeamMember {
  id      String @id @default(uuid())
  team    Team   @relation(fields: [teamId], references: [id])
  teamId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  role    String // "OWNER", "ADMIN", "MEMBER"
  joinedAt DateTime @default(now())

  @@unique([teamId, userId])
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String?
  team        Team       @relation(fields: [teamId], references: [id])
  teamId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tasks       Task[]
  tags        Tag[]
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      String     @default("TODO") // "TODO", "IN_PROGRESS", "DONE", "BLOCKED"
  priority    String     @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "URGENT"
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  creator     User       @relation(fields: [creatorId], references: [id])
  creatorId   String
  assignees   User[]     @relation("TaskAssignments")
  tags        Tag[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  tasks     Task[]
}
